// Contagem regressiva

//  la√ßo 

// for(let i = 10; i >= 0; i--){
//     console.log(i)
// }


// fun√ß√£o recursiva 

function contagemRegressiva(n){
    console.log(n)
    // caso base
    if(n === 0){
        return;
    }
    contagemRegressiva(n - 1)
}

contagemRegressiva(5)




// ‚úÖ O que √© uma fun√ß√£o recursiva?
// Uma fun√ß√£o recursiva √© uma fun√ß√£o que chama a si mesma durante sua execu√ß√£o, at√© que uma condi√ß√£o de parada (chamada de caso base) seja atingida.

// ‚û°Ô∏è A recurs√£o √© muito usada para resolver problemas que podem ser quebrados em subproblemas menores da mesma natureza.
// ‚û°Ô∏è Importante: sem um caso base, a fun√ß√£o nunca para e gera um erro de estouro de pilha ("stack overflow").

// ‚úÖ Agora vamos linha a linha dos dois c√≥digos que voc√™ enviou!
// üü¶ 1¬∫ C√≥digo: Usando um la√ßo for
// javascript
// Copiar
// Editar
// // Contagem regressiva
// ‚û°Ô∏è Coment√°rio: est√° indicando o que esse bloco de c√≥digo faz.

// javascript
// Copiar
// Editar
// // la√ßo
// ‚û°Ô∏è Coment√°rio: vai usar um la√ßo de repeti√ß√£o (loop).

// javascript
// Copiar
// Editar
// // for(let i = 10; i >= 0; i--){
// ‚û°Ô∏è Estrutura do la√ßo:

// let i = 10 ‚Üí come√ßa com o valor 10.

// i >= 0 ‚Üí enquanto i for maior ou igual a zero, continua repetindo.

// i-- ‚Üí a cada repeti√ß√£o, subtrai 1 de i.

// javascript
// Copiar
// Editar
// // console.log(i)
// ‚û°Ô∏è A cada repeti√ß√£o, exibe o valor atual de i no console.
// Vai mostrar: 10, 9, 8, ..., 0.

// ‚úÖ Resumo do la√ßo:
// Come√ßa em 10 e vai at√© 0, decrementando 1 a cada volta, exibindo os n√∫meros no console.

// üü¶ 2¬∫ C√≥digo: Usando fun√ß√£o recursiva
// javascript
// Copiar
// Editar
// // fun√ß√£o recursiva
// ‚û°Ô∏è Coment√°rio: agora ser√° usada a t√©cnica de recurs√£o.

// javascript
// Copiar
// Editar
// function contagemRegressiva(n){
// ‚û°Ô∏è Define uma fun√ß√£o chamada contagemRegressiva.
// Recebe um par√¢metro n, que ser√° o n√∫mero inicial da contagem.

// javascript
// Copiar
// Editar
//     console.log(n)
// ‚û°Ô∏è Sempre que a fun√ß√£o for chamada, imprime no console o valor atual de n.

// javascript
// Copiar
// Editar
//     // caso base
// ‚û°Ô∏è Coment√°rio: vai definir a condi√ß√£o de parada da fun√ß√£o, fundamental em recurs√£o.

// javascript
// Copiar
// Editar
//     if(n === 0){
// ‚û°Ô∏è Verifica: "O valor de n √© igual a 0?"
// Se sim, chegou no fim da contagem.

// javascript
// Copiar
// Editar
//         return;
// ‚û°Ô∏è Se n for 0, a fun√ß√£o para por aqui, n√£o chama mais a si mesma.
// Esse √© o caso base, evita o loop infinito.

// javascript
// Copiar
// Editar
//     }
// ‚û°Ô∏è Fim do bloco if.

// javascript
// Copiar
// Editar
//     contagemRegressiva(n - 1)
// ‚û°Ô∏è Se n n√£o for 0, a fun√ß√£o se chama novamente, mas agora com n - 1.
// Ou seja: diminui 1 a cada chamada.
// Exemplo: se come√ßou com 5 ‚Üí chama 4 ‚Üí chama 3 ‚Üí ... ‚Üí at√© 0.

// javascript
// Copiar
// Editar
// }
// ‚û°Ô∏è Fim da fun√ß√£o contagemRegressiva.

// javascript
// Copiar
// Editar
// contagemRegressiva(5)
// ‚û°Ô∏è Chama a fun√ß√£o pela primeira vez, iniciando a contagem de 5 at√© 0.

// ‚û°Ô∏è O fluxo ser√° assim:

// contagemRegressiva(5) ‚Üí imprime 5 ‚Üí chama contagemRegressiva(4)

// contagemRegressiva(4) ‚Üí imprime 4 ‚Üí chama contagemRegressiva(3)

// ... e assim por diante...

// contagemRegressiva(0) ‚Üí imprime 0 ‚Üí como n === 0, a fun√ß√£o para.

// ‚úÖ Resultado no console:

// Copiar
// Editar
// 5  
// 4  
// 3  
// 2  
// 1  
// 0  
// ‚úÖ üìä Compara√ß√£o: La√ßo vs Recurs√£o
// La√ßo (for)	Fun√ß√£o Recursiva
// Mais simples e eficiente para casos assim	Mais elegante, mas usa mais mem√≥ria (chamadas na pilha)
// N√£o precisa de caso base	Precisa de um caso base obrigat√≥rio
// Executa repeti√ß√£o automaticamente	A repeti√ß√£o ocorre chamando a fun√ß√£o a si mesma
// Ideal para tarefas repetitivas simples	Ideal para resolver problemas que se repetem de forma natural, como fatorial, Fibonacci

// ‚úÖ üìå Resumo:
// Fun√ß√£o recursiva: quando a fun√ß√£o se chama sozinha at√© atingir uma condi√ß√£o de parada.

// No seu c√≥digo: a contagem come√ßa no n√∫mero e vai at√© 0, chamando a fun√ß√£o repetidamente, diminuindo 1 a cada vez.

