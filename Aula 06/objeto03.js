// 

let pessoa = {
    nome: "J√∫lios",
    idade: 25,
    cpf: 23443223476
}

let pessoas = []

// fun√ß√£o para criar uma nova pessoa 

function CriarPessoa(nome, idade, cpf) {
    const pessoa = {
        nome: nome,
        idade: idade,
        cpf: cpf
    }
    pessoas.push(pessoa)
    console.log(`Pessoa adicionada: ${nome}, ${idade} anos, ${cpf}`)
}

// fun√ß√£o listar todas as pessoas 


function listarPessoas() {
    console.log("\n lista de pessoas : ")
    pessoas.forEach((valor, indice) => {
        console.log(`${indice}: ${valor.nome} - ${valor.idade} anos, ${valor.cpf} `)
    })
}
// ========================================================================================


// Fun√ß√£o para atualizar uma pessoa ! 

function atualizarPessoa(indice, novo_nome, nova_idade, novo_cpf) {
    if (pessoas[indice]){
        pessoas[indice].nome = novo_nome;
        pessoas[indice].idade = nova_idade;
        pessoas[indice].cpf = novo_cpf;
        console.log(`Pessoa atualizada no √≠ndice ${indice}`)
    }
    else{
        console.log("√çndice inv√°lido!")
    }
}


// fun√ßao para excluir uma pessoa ! 


function excluirPessoa(indice){
    if(pessoas[indice]){
        const removida = pessoas.splice(indice,1)
        console.log(`Pessoa removida: ${removida[0].nome}`)
    }
    else{
        console.log("√çndice inv√°lido!")
    }
}

//  =======================================================================================

CriarPessoa("Matheus", 35, 13343444300)
CriarPessoa("Jo√£o", 32, 14434444300)
CriarPessoa("Pedro", 25, 15673444300)
CriarPessoa("Priscila", 18, 16663444300)
CriarPessoa("Valeria", 67, 18783444300)
CriarPessoa("Aparecida", 77, 13365644300)
CriarPessoa("Suzana", 46, 13375744300)
CriarPessoa("Rita", 47, 13398744300)
CriarPessoa("Jeferson", 88, 13343454300)
CriarPessoa("Pablo", 33, 13348764300)

listarPessoas()

atualizarPessoa(2, "Chapolin", 20, 2344322345)

listarPessoas()

excluirPessoa(2)

listarPessoas()




// ==========================================================================================

// explica√ß√£o completa, linha por linha, incluindo as novas fun√ß√µes: atualizar e excluir pessoa.

// ‚úÖ Parte 1: Declara√ß√£o de vari√°veis
// javascript
// Copiar
// Editar
// let pessoa = {
//     nome: "J√∫lios",
//     idade: 25,
//     cpf: 23443223476
// }
// ‚úÖ Criamos um objeto chamado pessoa com 3 propriedades:
// ‚û°Ô∏è nome: "J√∫lios"
// ‚û°Ô∏è idade: 25
// ‚û°Ô∏è cpf: 23443223476

// üí° Obs.: Esse objeto n√£o est√° sendo usado no restante do c√≥digo, mas serve como exemplo de uma pessoa.

// javascript
// Copiar
// Editar
// let pessoas = []
// ‚úÖ Criamos um array vazio chamado pessoas.
// ‚û°Ô∏è Aqui vamos guardar todas as pessoas que criarmos.

// ‚úÖ Parte 2: Fun√ß√£o para criar uma nova pessoa
// javascript
// Copiar
// Editar
// function CriarPessoa(nome, idade, cpf) {
// ‚úÖ Criamos a fun√ß√£o CriarPessoa que recebe 3 par√¢metros:
// ‚û°Ô∏è nome ‚Üí nome da pessoa.
// ‚û°Ô∏è idade ‚Üí idade da pessoa.
// ‚û°Ô∏è cpf ‚Üí CPF da pessoa.

// javascript
// Copiar
// Editar
//     const pessoa = {
//         nome: nome,
//         idade: idade,
//         cpf: cpf
//     }
// ‚úÖ Dentro da fun√ß√£o, criamos um objeto pessoa com os valores recebidos.
// ‚û°Ô∏è Cada propriedade recebe o valor correspondente.

// javascript
// Copiar
// Editar
//     pessoas.push(pessoa)
// ‚úÖ Usamos .push() para adicionar o objeto pessoa no array pessoas.

// javascript
// Copiar
// Editar
//     console.log(`Pessoa adicionada: ${nome}, ${idade} anos, ${cpf}`)
// ‚úÖ Mostramos no console uma mensagem confirmando a adi√ß√£o da pessoa.

// javascript
// Copiar
// Editar
// }
// ‚úÖ Fechamos a fun√ß√£o CriarPessoa.

// ‚úÖ Parte 3: Fun√ß√£o para listar todas as pessoas
// javascript
// Copiar
// Editar
// function listarPessoas() {
// ‚úÖ Criamos a fun√ß√£o listarPessoas.
// ‚û°Ô∏è N√£o recebe par√¢metros.
// ‚û°Ô∏è Serve para mostrar todas as pessoas cadastradas.

// javascript
// Copiar
// Editar
//     console.log("\n lista de pessoas : ")
// ‚úÖ Mostramos no console o t√≠tulo da lista.
// ‚û°Ô∏è \n ‚Üí quebra de linha para separar visualmente.

// javascript
// Copiar
// Editar
//     pessoas.forEach((valor, indice) => {
// ‚úÖ Usamos .forEach() para percorrer o array pessoas.
// ‚û°Ô∏è valor ‚Üí representa cada objeto pessoa.
// ‚û°Ô∏è indice ‚Üí representa a posi√ß√£o no array.

// javascript
// Copiar
// Editar
//         console.log(`${indice}: ${valor.nome} - ${valor.idade} anos, ${valor.cpf} `)
// ‚úÖ Mostramos no console:
// ‚û°Ô∏è O n√∫mero (indice).
// ‚û°Ô∏è O nome (valor.nome).
// ‚û°Ô∏è A idade (valor.idade).
// ‚û°Ô∏è O CPF (valor.cpf).

// javascript
// Copiar
// Editar
//     })
// }
// ‚úÖ Fechamos o .forEach() e depois a fun√ß√£o listarPessoas.

// ‚úÖ Parte 4: Fun√ß√£o para atualizar uma pessoa
// javascript
// Copiar
// Editar
// function atualizarPessoa(indice, novo_nome, nova_idade, novo_cpf) {
// ‚úÖ Criamos a fun√ß√£o atualizarPessoa com 4 par√¢metros:
// ‚û°Ô∏è indice ‚Üí a posi√ß√£o da pessoa no array.
// ‚û°Ô∏è novo_nome ‚Üí novo nome.
// ‚û°Ô∏è nova_idade ‚Üí nova idade.
// ‚û°Ô∏è novo_cpf ‚Üí novo CPF.

// javascript
// Copiar
// Editar
//     if (pessoas[indice]){
// ‚úÖ Verificamos se existe uma pessoa nesse indice.
// ‚û°Ô∏è Evita tentar atualizar uma posi√ß√£o inexistente.

// javascript
// Copiar
// Editar
//         pessoas[indice].nome = novo_nome;
//         pessoas[indice].idade = nova_idade;
//         pessoas[indice].cpf = novo_cpf;
// ‚úÖ Se a pessoa existe, atualizamos as 3 propriedades:
// ‚û°Ô∏è nome ‚Üí recebe novo_nome.
// ‚û°Ô∏è idade ‚Üí recebe nova_idade.
// ‚û°Ô∏è cpf ‚Üí recebe novo_cpf.

// javascript
// Copiar
// Editar
//         console.log(`Pessoa atualizada no √≠ndice ${indice}`)
// ‚úÖ Mostramos no console que a pessoa foi atualizada.

// javascript
// Copiar
// Editar
//     } else {
//         console.log("√çndice inv√°lido!")
//     }
// ‚úÖ Se n√£o existir pessoa nesse √≠ndice, mostramos "√çndice inv√°lido!".

// javascript
// Copiar
// Editar
// }
// ‚úÖ Fechamos a fun√ß√£o atualizarPessoa.

// ‚úÖ Parte 5: Fun√ß√£o para excluir uma pessoa
// javascript
// Copiar
// Editar
// function excluirPessoa(indice){
// ‚úÖ Criamos a fun√ß√£o excluirPessoa com 1 par√¢metro:
// ‚û°Ô∏è indice ‚Üí posi√ß√£o da pessoa que queremos remover.

// javascript
// Copiar
// Editar
//     if(pessoas[indice]){
// ‚úÖ Verificamos se existe uma pessoa nesse √≠ndice.

// javascript
// Copiar
// Editar
//         const removida = pessoas.splice(indice,1)
// ‚úÖ Se existe:
// ‚û°Ô∏è Usamos .splice(indice, 1) para remover 1 elemento no √≠ndice especificado.
// ‚û°Ô∏è O .splice() devolve um array com os elementos removidos.
// ‚û°Ô∏è Guardamos esse array na vari√°vel removida.

// javascript
// Copiar
// Editar
//         console.log(`Pessoa removida: ${removida[0].nome}`)
// ‚úÖ Mostramos no console o nome da pessoa que foi removida.
// ‚û°Ô∏è Como .splice() devolve um array, usamos [0] para pegar o primeiro elemento.

// javascript
// Copiar
// Editar
//     } else {
//         console.log("√çndice inv√°lido!")
//     }
// ‚úÖ Se n√£o existe pessoa nesse √≠ndice, mostramos "√çndice inv√°lido!".

// javascript
// Copiar
// Editar
// }
// ‚úÖ Fechamos a fun√ß√£o excluirPessoa.

// ‚úÖ Parte 6: Execu√ß√£o das fun√ß√µes
// javascript
// Copiar
// Editar
// CriarPessoa("Matheus", 35, 13343444300)
// CriarPessoa("Jo√£o", 32, 14434444300)
// CriarPessoa("Pedro", 25, 15673444300)
// CriarPessoa("Priscila", 18, 16663444300)
// CriarPessoa("Valeria", 67, 18783444300)
// CriarPessoa("Aparecida", 77, 13365644300)
// CriarPessoa("Suzana", 46, 13375744300)
// CriarPessoa("Rita", 47, 13398744300)
// CriarPessoa("Jeferson", 88, 13343454300)
// CriarPessoa("Pablo", 33, 13348764300)
// ‚úÖ Aqui estamos criando 10 pessoas e adicionando no array pessoas.
// ‚û°Ô∏è Cada chamada cria um objeto e adiciona na lista.

// javascript
// Copiar
// Editar
// listarPessoas()
// ‚úÖ Chamamos a fun√ß√£o listarPessoas() para mostrar todas as pessoas cadastradas.

// javascript
// Copiar
// Editar
// atualizarPessoa(2, "Chapolin", 20, 2344322345)
// ‚úÖ Atualizamos a pessoa no √≠ndice 2 (ou seja, a terceira da lista):
// ‚û°Ô∏è Nome ‚Üí "Chapolin"
// ‚û°Ô∏è Idade ‚Üí 20
// ‚û°Ô∏è CPF ‚Üí 2344322345

// javascript
// Copiar
// Editar
// listarPessoas()
// ‚úÖ Chamamos novamente listarPessoas() para ver a lista atualizada.

// javascript
// Copiar
// Editar
// excluirPessoa(2)
// ‚úÖ Exclu√≠mos a pessoa no √≠ndice 2 (que agora √© "Chapolin").

// javascript
// Copiar
// Editar
// listarPessoas()
// ‚úÖ Mostramos a lista final, j√° sem a pessoa removida.

// ‚úÖ Resumo do fluxo:
// Criamos v√°rias pessoas.

// Listamos todas.

// Atualizamos uma.

// Listamos novamente.

// Exclu√≠mos uma.

// Listamos pela √∫ltima vez.

// ‚úÖ O que voc√™ aprendeu?
// Conceito	Descri√ß√£o
// Objeto	Estrutura com v√°rias propriedades (nome, idade, cpf).
// Array	Lista que guarda objetos (as pessoas).
// .push()	Adiciona uma pessoa ao final da lista.
// .forEach()	Percorre a lista mostrando cada pessoa.
// .splice()	Remove pessoa de uma posi√ß√£o espec√≠fica.
// Atualiza√ß√£o	Modificamos propriedades de um objeto existente.